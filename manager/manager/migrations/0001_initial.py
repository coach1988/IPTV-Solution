# Generated by Django 5.0.3 on 2024-03-07 16:17

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='iptvGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('name', models.CharField(max_length=255, verbose_name='Group')),
            ],
            options={
                'verbose_name': 'IPTV - Group',
                'verbose_name_plural': 'IPTV - Groups',
            },
        ),
        migrations.CreateModel(
            name='iptvIcon',
            fields=[
                ('url', models.CharField(max_length=1024, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, editable=False, max_length=1024, null=True)),
                ('file_type', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('file_size_byte', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='File size (kB)')),
            ],
            options={
                'verbose_name': 'IPTV - Logo',
                'verbose_name_plural': 'IPTV - Logos',
            },
        ),
        migrations.CreateModel(
            name='iptvProxy',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Proxy Name')),
                ('internal_url', models.CharField(default='http://localhost', help_text='URI + hostname target to control the stream server, e.g. "http://myhost.mydomain.net"', max_length=255, verbose_name='Internal URL')),
                ('internal_port', models.PositiveSmallIntegerField(default=8089, verbose_name='Internal Port')),
                ('url', models.CharField(help_text='URI + hostname to use as prefix in playlists and EPGs, e.g. "http://myhost.mydomain.net"', max_length=255, verbose_name='External URL')),
                ('port', models.PositiveSmallIntegerField(default=8089, verbose_name='External Port')),
            ],
            options={
                'verbose_name': 'Upstream - Proxy Server',
                'verbose_name_plural': 'Upstream - Proxy Servers',
            },
        ),
        migrations.CreateModel(
            name='iptvUpstreamPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('group_filter', models.TextField(blank=True, help_text='Exclude these groups from further processing', null=True, verbose_name='Group filters')),
                ('path', models.CharField(help_text='The location of the playlist', max_length=255, verbose_name='Path / URL')),
                ('is_local', models.BooleanField(default=False, help_text='This playlist is a local file', verbose_name='Is local')),
                ('update_interval', models.PositiveSmallIntegerField(default=24)),
                ('last_update', models.DateTimeField(blank=True, editable=False, null=True)),
                ('max_conns', models.SmallIntegerField(default=0, verbose_name='Max concurrent streams')),
                ('in_use', models.SmallIntegerField(default=0, verbose_name='Active streams')),
                ('num_filtered_groups', models.SmallIntegerField(help_text='Amount of filtered groups', verbose_name='Filtered groups')),
            ],
            options={
                'verbose_name': 'Upstream - Playlist',
                'verbose_name_plural': 'Upstream - Playlists',
            },
        ),
        migrations.CreateModel(
            name='iptvUserAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('ua_string', models.CharField(blank=True, default='', help_text='User agent string to send when requesting upstream resources', max_length=255, verbose_name='User Agent String')),
            ],
            options={
                'verbose_name': 'Upstream - User Agent String',
                'verbose_name_plural': 'Upstream - User Agent Strings',
            },
        ),
        migrations.CreateModel(
            name='iptvChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('name', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=1024)),
                ('tvg_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='EPG ID')),
                ('tvg_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='EPG Name')),
                ('last_seen', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Last import')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='First import')),
                ('extra_info', models.TextField(blank=True, max_length=255, null=True, verbose_name='Additional info')),
                ('protected', models.BooleanField(default=False, verbose_name='Keep status')),
                ('group_title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='manager.iptvgroup', verbose_name='Group')),
                ('tvg_logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='manager.iptvicon', verbose_name='Logo')),
                ('upstream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manager.iptvupstreamplaylist', verbose_name='Playlist')),
            ],
            options={
                'verbose_name': 'IPTV - Channel',
                'verbose_name_plural': 'IPTV - Channels',
            },
        ),
        migrations.CreateModel(
            name='iptvDownstreamPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_mode', models.CharField(choices=[('A', 'Any'), ('E', 'Exact'), ('P', 'Prefix'), ('S', 'Suffix')], default='A', max_length=1, verbose_name='Filter mode')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('name', models.CharField(max_length=255)),
                ('groups', models.TextField(blank=True, help_text='Channel groups to include in this playlist', null=True, verbose_name='Playlist channel groups')),
                ('channel_filter', models.TextField(blank=True, help_text='Additionally filtered out channels', null=True, verbose_name='Channel filters')),
                ('proxy', models.ForeignKey(help_text='Streaming proxy to use for playlist entries', max_length=255, on_delete=django.db.models.deletion.PROTECT, to='manager.iptvproxy', verbose_name='Proxy')),
            ],
            options={
                'verbose_name': 'Downstream - Playlist',
                'verbose_name_plural': 'Downstream - Playlists',
            },
        ),
        migrations.CreateModel(
            name='iptvStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_ip', models.CharField(editable=False, max_length=15, verbose_name='Client IP')),
                ('streamtime', models.CharField(editable=False, max_length=15, verbose_name='Total stream time')),
                ('last_streamtime', models.CharField(editable=False, max_length=15, verbose_name='Last stream duration')),
                ('last_access', models.DateTimeField(auto_now=True, verbose_name='Last streamed')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manager.iptvchannel')),
            ],
            options={
                'verbose_name': 'Downstream - Stat',
                'verbose_name_plural': 'Downstream - Stats',
            },
        ),
        migrations.AddField(
            model_name='iptvgroup',
            name='upstream',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='manager.iptvupstreamplaylist', verbose_name='Playlist'),
        ),
        migrations.AddField(
            model_name='iptvupstreamplaylist',
            name='user_agent',
            field=models.ForeignKey(blank=True, help_text='User agent string to send if requesting an upstream EPG', max_length=255, null=True, on_delete=django.db.models.deletion.PROTECT, to='manager.iptvuseragent', verbose_name='User Agent'),
        ),
        migrations.CreateModel(
            name='iptvSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=1280, verbose_name='Internal Session ID')),
                ('client_ip', models.CharField(editable=False, max_length=15, verbose_name='Client')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Stream start time')),
                ('url', models.CharField(editable=False, max_length=1024)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manager.iptvchannel')),
                ('proxy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manager.iptvproxy', verbose_name='Routed via')),
                ('user_agent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='manager.iptvuseragent')),
            ],
            options={
                'verbose_name': 'Upstream - Proxy Session',
                'verbose_name_plural': 'Upstream - Proxy Sessions',
            },
        ),
        migrations.CreateModel(
            name='iptvEPG',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('path', models.CharField(help_text='The location of the EPG file', max_length=255, verbose_name='Path / URL')),
                ('is_local', models.BooleanField(default=False, verbose_name='Is local')),
                ('last_download', models.DateTimeField(blank=True, editable=False, null=True)),
                ('update_interval', models.PositiveSmallIntegerField(default=24)),
                ('user_agent', models.ForeignKey(blank=True, help_text='User agent string to send if requesting an upstream EPG', max_length=255, null=True, on_delete=django.db.models.deletion.PROTECT, to='manager.iptvuseragent', verbose_name='User Agent')),
            ],
            options={
                'verbose_name': 'Upstream - EPG',
                'verbose_name_plural': "Upstream - EPG's",
            },
        ),
        migrations.AddConstraint(
            model_name='iptvstat',
            constraint=models.UniqueConstraint(fields=('channel', 'client_ip'), name='channel_client_pair'),
        ),
        migrations.AddConstraint(
            model_name='iptvgroup',
            constraint=models.UniqueConstraint(fields=('name', 'upstream'), name='unique_group'),
        ),
        migrations.AddConstraint(
            model_name='iptvchannel',
            constraint=models.UniqueConstraint(fields=('name', 'url', 'group_title', 'upstream', 'extra_info'), name='unique_channel'),
        ),
        migrations.AddConstraint(
            model_name='iptvupstreamplaylist',
            constraint=models.UniqueConstraint(fields=('name', 'path'), name='unique_upstream'),
        ),
    ]
